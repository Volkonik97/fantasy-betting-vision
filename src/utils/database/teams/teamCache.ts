
/**
 * SystÃ¨me de cache pour les Ã©quipes
 * RÃ©duit les appels Ã  la base de donnÃ©es et amÃ©liore les performances
 */

import { Team } from "../../models/types";

// Cache des Ã©quipes
let teamsCache: Team[] | null = null;
let teamCacheTimestamp: number = 0;
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes en millisecondes

/**
 * VÃ©rifie si le cache des Ã©quipes est valide
 */
export const isTeamsCacheValid = (): boolean => {
  if (!teamsCache) return false;
  
  const now = Date.now();
  return now - teamCacheTimestamp < CACHE_DURATION;
};

/**
 * DÃ©finit le cache des Ã©quipes
 */
export const setTeamsCache = (teams: Team[]): void => {
  teamsCache = [...teams];
  teamCacheTimestamp = Date.now();
  console.log(`ðŸ§  Cache des Ã©quipes mis Ã  jour avec ${teams.length} Ã©quipes`);
};

/**
 * RÃ©cupÃ¨re les Ã©quipes depuis le cache
 */
export const getTeamsFromCache = (): Team[] | null => {
  if (!isTeamsCacheValid()) {
    return null;
  }
  
  console.log(`ðŸ§  Utilisation du cache d'Ã©quipes (${teamsCache?.length || 0} Ã©quipes)`);
  return teamsCache ? [...teamsCache] : null;
};

/**
 * Vide le cache des Ã©quipes
 */
export const clearTeamsCache = (): void => {
  teamsCache = null;
  teamCacheTimestamp = 0;
  console.log("ðŸ§¹ Cache des Ã©quipes vidÃ©");
};

/**
 * Met Ã  jour une Ã©quipe spÃ©cifique dans le cache
 */
export const updateTeamInCache = (updatedTeam: Team): void => {
  if (!teamsCache) return;
  
  const index = teamsCache.findIndex(team => team.id === updatedTeam.id);
  if (index !== -1) {
    teamsCache[index] = updatedTeam;
    teamCacheTimestamp = Date.now();
    console.log(`ðŸ§  Ã‰quipe ${updatedTeam.name} (${updatedTeam.id}) mise Ã  jour dans le cache`);
  }
};

/**
 * Ajoute une Ã©quipe au cache
 */
export const addTeamToCache = (newTeam: Team): void => {
  if (!teamsCache) {
    teamsCache = [newTeam];
  } else {
    teamsCache.push(newTeam);
  }
  teamCacheTimestamp = Date.now();
  console.log(`ðŸ§  Ã‰quipe ${newTeam.name} (${newTeam.id}) ajoutÃ©e au cache`);
};
